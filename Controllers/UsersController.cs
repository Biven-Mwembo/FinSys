using Microsoft.AspNetCore.Mvc;

using System;

using System.IO;

using System.Threading.Tasks;

using FinSys.Models;

using FinSys.Services;

using Microsoft.AspNetCore.Hosting;

using System.Net.Http;

using Microsoft.AspNetCore.Authorization; // ðŸ”‘ Add this using directive



namespace FinSys.Controllers

{

Â  Â  // ðŸ”‘ Add the Authorize attribute here to protect the controller

Â  Â  [Authorize]

Â  Â  [ApiController]

Â  Â  [Route("api/[controller]")]

Â  Â  public class UsersController : ControllerBase

Â  Â  {

Â  Â  Â  Â  private readonly SupabaseService _supabase;

Â  Â  Â  Â  private readonly IWebHostEnvironment _env;



Â  Â  Â  Â  public UsersController(SupabaseService supabase, IWebHostEnvironment env)

Â  Â  Â  Â  {

Â  Â  Â  Â  Â  Â  _supabase = supabase;

Â  Â  Â  Â  Â  Â  _env = env;

Â  Â  Â  Â  }



Â  Â  Â  Â  // ðŸ”‘ ADMIN READ: Only allows users with the "Admin" role to call this

Â  Â  Â  Â  [HttpGet]

Â  Â  Â  Â  [Authorize(Roles = "Admin")]

Â  Â  Â  Â  public async Task<IActionResult> Get() => Ok(await _supabase.GetUsers());



Â  Â  Â  Â  [HttpPost]

Â  Â  Â  Â  // ðŸ”‘ Allow public access since this is the Sign Up endpoint

Â  Â  Â  Â  [AllowAnonymous]

Â  Â  Â  Â  [Consumes("multipart/form-data")]

Â  Â  Â  Â  public async Task<IActionResult> Post([FromForm] UserSignUpRequest request)

Â  Â  Â  Â  {

Â  Â  Â  Â  Â  Â  // ... (The rest of your existing Post logic remains here) ...



Â  Â  Â  Â  Â  Â  // 1. Map DTO fields to the database model

Â  Â  Â  Â  Â  Â  var user = new User

Â  Â  Â  Â  Â  Â  {

Â  Â  Â  Â  Â  Â  Â  Â  Name = request.Name,

Â  Â  Â  Â  Â  Â  Â  Â  Surname = request.Surname,

Â  Â  Â  Â  Â  Â  Â  Â  Dob = request.Dob,

Â  Â  Â  Â  Â  Â  Â  Â  Email = request.Email,

Â  Â  Â  Â  Â  Â  Â  Â  Address = request.Address,

Â  Â  Â  Â  Â  Â  Â  Â  Password = request.Password

Â  Â  Â  Â  Â  Â  Â  Â  // NOTE: Role is defaulted to "user" in the User model or AuthController logic

Â  Â  Â  Â  Â  Â  };



Â  Â  Â  Â  Â  Â  // ... (Photo upload logic) ...



Â  Â  Â  Â  Â  Â  try

Â  Â  Â  Â  Â  Â  {

Â  Â  Â  Â  Â  Â  Â  Â  var createdUser = await _supabase.AddUser(user);

Â  Â  Â  Â  Â  Â  Â  Â  // ðŸ”‘ NOTE: The frontend SignUp component is expecting a redirect to Login or success message,Â 

Â  Â  Â  Â  Â  Â  Â  Â  // so you might want to return an Ok or Created response without full user data.

Â  Â  Â  Â  Â  Â  Â  Â  return CreatedAtAction(nameof(Get), new { id = createdUser.Id }, createdUser);

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  catch (HttpRequestException ex)

Â  Â  Â  Â  Â  Â  {

Â  Â  Â  Â  Â  Â  Â  Â  return BadRequest(new { Message = "User creation failed at Supabase.", Details = ex.Message });

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  }

Â  Â  }

Â  Â  // ... (Your TransactionRequest DTOs are usually in another file, but are omitted here for brevity)

}
